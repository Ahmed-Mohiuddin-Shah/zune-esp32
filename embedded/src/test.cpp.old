#include <Arduino.h>
#include "USB_STREAM.h"
#include <iostream>

/* Define the camera frame callback function implementation */
static void onCameraFrameCallback(uvc_frame *frame, void *user_ptr)
{
    Serial.printf("uvc callback! frame_format = %d, seq = %" PRIu32 ", width = %" PRIu32", height = %" PRIu32 ", length = %u, ptr = %d\n",
             frame->frame_format, frame->sequence, frame->width, frame->height, frame->data_bytes, (int)user_ptr);
}

void setup()
{

    // Frame parameters
    int width = 160;
    int height = 120;
    int frameInterval = FRAME_INTERVAL_FPS_30; // 30 fps in microseconds

    // Frame size for YUYV format
    int frameSize = width * height * 2; // YUYV uses 2 bytes per pixel

    // Add 10% overhead for transfer buffer
    int transferBufferSize = frameSize * 1.1;

    Serial.begin(115200);
    try
    {
    // Instantiate an object
    USB_STREAM *usb = new USB_STREAM();

    // allocate memory
    // Allocate transfer buffers
    uint8_t *transferBufferA = (uint8_t *)malloc(transferBufferSize);
    uint8_t *transferBufferB = (uint8_t *)malloc(transferBufferSize);

    // Allocate frame buffer
    uint8_t *frameBuffer = (uint8_t *)malloc(frameSize);

    // Check allocations
    if (transferBufferA == NULL || transferBufferB == NULL || frameBuffer == NULL)
    {
        Serial.println("Failed to allocate buffers");
        return;
    }

    // Config the parameter
    usb->uvcConfiguration(width, height, frameInterval, transferBufferSize, transferBufferA, transferBufferB, frameSize, frameBuffer);


        // Register the camera frame callback function
        usb->uvcCamRegisterCb(&onCameraFrameCallback, NULL);

        usb->start();

        usb->connectWait(1000);
        delay(5000);

        usb->uvcCamSuspend(NULL);
        delay(5000);

        usb->uvcCamResume(NULL);
    }
    catch(const std::exception& e)
    {
        Serial.println(e.what());
    }
    

    /*Dont forget to free the allocated memory*/
    // free(_xferBufferA);
    // free(_xferBufferB);
    // free(_frameBuffer);
}

void loop()
{
    vTaskDelay(100);
}